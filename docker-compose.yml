version: '3.5'
services:
  api1: &api
    #image: docker.io/akitaonrails/rinhabackendapi:latest
    build: ./
    environment:
      PORT: 3000
      DB_HOST: localhost
      DB_POOL: 200
      RAILS_MAX_THREADS: 95
      WEB_CONCURRENCY: 2
      RAILS_LOG_LEVEL: warn
      RAILS_ENV: production
      REDIS_HOST: localhost
      REDIS_POOL_SIZE: 50
      JOB_BATCH_SIZE: 40
      CACHE_EXPIRES_SECONDS: 60
      RAILS_LOG_TO_STDOUT: 'true'
      RUBY_YJIT_ENABLE: 1
      RAILS_MASTER_KEY: 84ec93b5f81d27f8fdf7fc71d7b28e15
    hostname: api1
    depends_on:
      - postgres
      - redis
    network_mode: host
    deploy:
      resources:
        limits:
          cpus: '0.45'
          memory: '0.5GB'

  api2:
    <<: *api
    hostname: api2
    environment:
      PORT: 3001
      DB_HOST: localhost
      DB_POOL: 200
      RAILS_MAX_THREADS: 95
      WEB_CONCURRENCY: 2
      RAILS_LOG_LEVEL: warn
      RAILS_ENV: production
      REDIS_HOST: localhost
      REDIS_POOL_SIZE: 50
      JOB_BATCH_SIZE: 40
      CACHE_EXPIRES_SECONDS: 60
      RAILS_LOG_TO_STDOUT: 'true'
      RUBY_YJIT_ENABLE: 1
      RAILS_MASTER_KEY: 84ec93b5f81d27f8fdf7fc71d7b28e15

  sidekiq1: &sidekiq
    <<: *api
    hostname: sidekiq
    environment:
      DB_HOST: localhost
      DB_POOL: 3
      RAILS_MAX_THREADS: 1
      WEB_CONCURRENCY: 1
      RAILS_LOG_LEVEL: warn
      RAILS_ENV: production
      REDIS_HOST: localhost
      REDIS_POOL_SIZE: 1
      JOB_BATCH_SIZE: 40
      JOB_FLUSH_TIMEOUT: 30
      CACHE_EXPIRES_SECONDS: 60
      RAILS_LOG_TO_STDOUT: 'true'
      RUBY_YJIT_ENABLE: 1
      RAILS_MASTER_KEY: 84ec93b5f81d27f8fdf7fc71d7b28e15
    command: /rails/bin/bundle exec sidekiq -c 1 -q insert_buffer
    deploy:
      resources:
        limits:
          cpus: '0.05'
          memory: '0.15GB'

  sidekiq2:
    <<: *sidekiq
    command: /rails/bin/bundle exec sidekiq -c 1 -q flush

  nginx: # Load Balancer
    image: docker.io/nginx:latest
    command: ["nginx", "-g", "daemon off;"]
    volumes:
      - ./nginx.conf:/etc/nginx/nginx.conf:ro
    depends_on:
      - api1
      - api2
    ulimits:
      nproc: 1000000
      nofile:
        soft: 1000000
        hard: 1000000
    network_mode: host
    deploy:
      resources:
        limits:
          cpus: '0.15'
          memory: '0.3GB'

  postgres: # Banco de dados
    image: docker.io/postgres
    hostname: postgres
    environment:
      POSTGRES_USERNAME: postgres
      POSTGRES_PASSWORD: password
    command: postgres -c 'max_connections=450'
    volumes:
      - ./postgresql.conf:/docker-entrypoint-initdb.d/postgresql.conf
    healthcheck:
      test: ["CMD-SHELL", "pg_isready"]
      interval: 5s
      timeout: 5s
      retries: 20
      start_period: 10s
    network_mode: host
    deploy:
      resources:
        limits:
          cpus: '0.30'
          memory: '1.3GB'

  redis:
    image: docker.io/redis:latest
    hostname: redis
    command: redis-server --save "" --appendonly no --maxclients 20000
    network_mode: host
    deploy:
      resources:
        limits:
          cpus: '0.05'
          memory: '0.1GB'
